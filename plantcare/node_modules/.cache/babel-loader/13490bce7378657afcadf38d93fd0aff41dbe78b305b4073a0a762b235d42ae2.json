{"ast":null,"code":"// src/api/plantApi.js\n// Integrasi CRUD Tanaman ke backend Pyramid\n\nconst API_BASE = 'http://localhost:6543/tanaman';\n\n// Pagination support: getTanamanList({ limit, offset })\nexport async function getTanamanList({\n  limit = 20,\n  offset = 0\n} = {}) {\n  var _data$tanaman;\n  const url = `${API_BASE}?limit=${limit}&offset=${offset}`;\n  const res = await fetch(url, {\n    credentials: 'include'\n  });\n  if (!res.ok) throw new Error('Gagal mengambil data tanaman');\n  const data = await res.json();\n  // Backend mengembalikan format: {\"tanaman\": [...], \"pagination\": {...}}\n  return {\n    tanaman: data.tanaman || [],\n    pagination: data.pagination || {\n      limit,\n      offset,\n      total: ((_data$tanaman = data.tanaman) === null || _data$tanaman === void 0 ? void 0 : _data$tanaman.length) || 0\n    }\n  };\n}\nexport async function getTanamanById(id) {\n  const res = await fetch(`${API_BASE}/${id}`, {\n    credentials: 'include'\n  });\n  if (!res.ok) throw new Error('Tanaman tidak ditemukan');\n  return res.json();\n}\nexport async function createTanaman(data) {\n  const res = await fetch(API_BASE, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify(data)\n  });\n  if (!res.ok) throw new Error('Gagal menambah tanaman');\n  return res.json();\n}\nexport async function updateTanaman(id, data) {\n  const res = await fetch(`${API_BASE}/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include',\n    body: JSON.stringify(data)\n  });\n  if (!res.ok) throw new Error('Gagal mengupdate tanaman');\n  return res.json();\n}\nexport async function deleteTanaman(id) {\n  const res = await fetch(`${API_BASE}/${id}`, {\n    method: 'DELETE',\n    credentials: 'include'\n  });\n  if (!res.ok) throw new Error('Gagal menghapus tanaman');\n  return res.json();\n}","map":{"version":3,"names":["API_BASE","getTanamanList","limit","offset","_data$tanaman","url","res","fetch","credentials","ok","Error","data","json","tanaman","pagination","total","length","getTanamanById","id","createTanaman","method","headers","body","JSON","stringify","updateTanaman","deleteTanaman"],"sources":["C:/Users/jerem/OneDrive/Desktop/uas-pemrograman_web_122450022/plantcare/src/api/plantApi.js"],"sourcesContent":["// src/api/plantApi.js\r\n// Integrasi CRUD Tanaman ke backend Pyramid\r\n\r\nconst API_BASE = 'http://localhost:6543/tanaman';\r\n\r\n// Pagination support: getTanamanList({ limit, offset })\r\nexport async function getTanamanList({ limit = 20, offset = 0 } = {}) {\r\n  const url = `${API_BASE}?limit=${limit}&offset=${offset}`;\r\n  const res = await fetch(url, { credentials: 'include' });\r\n  if (!res.ok) throw new Error('Gagal mengambil data tanaman');\r\n  const data = await res.json();\r\n  // Backend mengembalikan format: {\"tanaman\": [...], \"pagination\": {...}}\r\n  return {\r\n    tanaman: data.tanaman || [],\r\n    pagination: data.pagination || { limit, offset, total: data.tanaman?.length || 0 }\r\n  };\r\n}\r\n\r\nexport async function getTanamanById(id) {\r\n  const res = await fetch(`${API_BASE}/${id}`, { credentials: 'include' });\r\n  if (!res.ok) throw new Error('Tanaman tidak ditemukan');\r\n  return res.json();\r\n}\r\n\r\nexport async function createTanaman(data) {\r\n  const res = await fetch(API_BASE, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    credentials: 'include',\r\n    body: JSON.stringify(data),\r\n  });\r\n  if (!res.ok) throw new Error('Gagal menambah tanaman');\r\n  return res.json();\r\n}\r\n\r\nexport async function updateTanaman(id, data) {\r\n  const res = await fetch(`${API_BASE}/${id}`, {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    credentials: 'include',\r\n    body: JSON.stringify(data),\r\n  });\r\n  if (!res.ok) throw new Error('Gagal mengupdate tanaman');\r\n  return res.json();\r\n}\r\n\r\nexport async function deleteTanaman(id) {\r\n  const res = await fetch(`${API_BASE}/${id}`, {\r\n    method: 'DELETE',\r\n    credentials: 'include',\r\n  });\r\n  if (!res.ok) throw new Error('Gagal menghapus tanaman');\r\n  return res.json();\r\n}\r\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,QAAQ,GAAG,+BAA+B;;AAEhD;AACA,OAAO,eAAeC,cAAcA,CAAC;EAAEC,KAAK,GAAG,EAAE;EAAEC,MAAM,GAAG;AAAE,CAAC,GAAG,CAAC,CAAC,EAAE;EAAA,IAAAC,aAAA;EACpE,MAAMC,GAAG,GAAG,GAAGL,QAAQ,UAAUE,KAAK,WAAWC,MAAM,EAAE;EACzD,MAAMG,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAAEG,WAAW,EAAE;EAAU,CAAC,CAAC;EACxD,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,MAAMC,IAAI,GAAG,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;EAC7B;EACA,OAAO;IACLC,OAAO,EAAEF,IAAI,CAACE,OAAO,IAAI,EAAE;IAC3BC,UAAU,EAAEH,IAAI,CAACG,UAAU,IAAI;MAAEZ,KAAK;MAAEC,MAAM;MAAEY,KAAK,EAAE,EAAAX,aAAA,GAAAO,IAAI,CAACE,OAAO,cAAAT,aAAA,uBAAZA,aAAA,CAAcY,MAAM,KAAI;IAAE;EACnF,CAAC;AACH;AAEA,OAAO,eAAeC,cAAcA,CAACC,EAAE,EAAE;EACvC,MAAMZ,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,IAAIkB,EAAE,EAAE,EAAE;IAAEV,WAAW,EAAE;EAAU,CAAC,CAAC;EACxE,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EACvD,OAAOJ,GAAG,CAACM,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAeO,aAAaA,CAACR,IAAI,EAAE;EACxC,MAAML,GAAG,GAAG,MAAMC,KAAK,CAACP,QAAQ,EAAE;IAChCoB,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/Cb,WAAW,EAAE,SAAS;IACtBc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,IAAI;EAC3B,CAAC,CAAC;EACF,IAAI,CAACL,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;EACtD,OAAOJ,GAAG,CAACM,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAea,aAAaA,CAACP,EAAE,EAAEP,IAAI,EAAE;EAC5C,MAAML,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,IAAIkB,EAAE,EAAE,EAAE;IAC3CE,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/Cb,WAAW,EAAE,SAAS;IACtBc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACb,IAAI;EAC3B,CAAC,CAAC;EACF,IAAI,CAACL,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EACxD,OAAOJ,GAAG,CAACM,IAAI,CAAC,CAAC;AACnB;AAEA,OAAO,eAAec,aAAaA,CAACR,EAAE,EAAE;EACtC,MAAMZ,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGP,QAAQ,IAAIkB,EAAE,EAAE,EAAE;IAC3CE,MAAM,EAAE,QAAQ;IAChBZ,WAAW,EAAE;EACf,CAAC,CAAC;EACF,IAAI,CAACF,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EACvD,OAAOJ,GAAG,CAACM,IAAI,CAAC,CAAC;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}