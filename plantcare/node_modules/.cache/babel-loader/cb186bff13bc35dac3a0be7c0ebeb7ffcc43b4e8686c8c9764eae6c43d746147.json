{"ast":null,"code":"// src/services/api.js\n// Handler utama untuk request API dengan caching\n\nconst BASE_URL = 'http://localhost:6543';\n\n// Simple cache implementation for GET requests\nconst cache = new Map();\nconst CACHE_DURATION = 60000; // 1 minute cache\n\nfunction getCacheKey(path, options) {\n  return `${path}_${JSON.stringify(options || {})}`;\n}\nfunction isValidCache(cacheEntry) {\n  return cacheEntry && Date.now() - cacheEntry.timestamp < CACHE_DURATION;\n}\nexport async function apiRequest(path, options = {}) {\n  try {\n    // Check cache for GET requests\n    if (!options.method || options.method === 'GET') {\n      const cacheKey = getCacheKey(path, options);\n      const cached = cache.get(cacheKey);\n      if (isValidCache(cached)) {\n        console.log(`Cache hit for ${path}`);\n        return cached.data;\n      }\n    }\n    const res = await fetch(BASE_URL + path, {\n      credentials: 'include',\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers\n      },\n      ...options\n    });\n    const data = await res.json();\n    if (!res.ok) {\n      throw new Error(data.msg || data.message || 'API error: ' + res.status);\n    }\n\n    // Cache successful GET requests\n    if (!options.method || options.method === 'GET') {\n      const cacheKey = getCacheKey(path, options);\n      cache.set(cacheKey, {\n        data,\n        timestamp: Date.now()\n      });\n    }\n\n    // Clear cache on write operations\n    if (options.method && ['POST', 'PUT', 'DELETE'].includes(options.method)) {\n      cache.clear();\n    }\n    return data;\n  } catch (error) {\n    console.error('API Request Error:', error);\n    throw error;\n  }\n}\n\n// Function to manually clear cache\nexport function clearApiCache() {\n  cache.clear();\n}\n\n// Authentication API\nexport async function login(username, password) {\n  return apiRequest('/login', {\n    method: 'POST',\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n}\nexport async function logout(username) {\n  return apiRequest('/logout', {\n    method: 'POST',\n    body: JSON.stringify({\n      username\n    })\n  });\n}","map":{"version":3,"names":["BASE_URL","cache","Map","CACHE_DURATION","getCacheKey","path","options","JSON","stringify","isValidCache","cacheEntry","Date","now","timestamp","apiRequest","method","cacheKey","cached","get","console","log","data","res","fetch","credentials","headers","json","ok","Error","msg","message","status","set","includes","clear","error","clearApiCache","login","username","password","body","logout"],"sources":["C:/Users/jerem/OneDrive/Desktop/uas-pemrograman_web_122450022/plantcare/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\n// Handler utama untuk request API dengan caching\r\n\r\nconst BASE_URL = 'http://localhost:6543';\r\n\r\n// Simple cache implementation for GET requests\r\nconst cache = new Map();\r\nconst CACHE_DURATION = 60000; // 1 minute cache\r\n\r\nfunction getCacheKey(path, options) {\r\n  return `${path}_${JSON.stringify(options || {})}`;\r\n}\r\n\r\nfunction isValidCache(cacheEntry) {\r\n  return cacheEntry && (Date.now() - cacheEntry.timestamp) < CACHE_DURATION;\r\n}\r\n\r\nexport async function apiRequest(path, options = {}) {\r\n  try {\r\n    // Check cache for GET requests\r\n    if (!options.method || options.method === 'GET') {\r\n      const cacheKey = getCacheKey(path, options);\r\n      const cached = cache.get(cacheKey);\r\n      \r\n      if (isValidCache(cached)) {\r\n        console.log(`Cache hit for ${path}`);\r\n        return cached.data;\r\n      }\r\n    }\r\n\r\n    const res = await fetch(BASE_URL + path, {\r\n      credentials: 'include',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n      },\r\n      ...options,\r\n    });\r\n    \r\n    const data = await res.json();\r\n    \r\n    if (!res.ok) {\r\n      throw new Error(data.msg || data.message || 'API error: ' + res.status);\r\n    }\r\n    \r\n    // Cache successful GET requests\r\n    if (!options.method || options.method === 'GET') {\r\n      const cacheKey = getCacheKey(path, options);\r\n      cache.set(cacheKey, {\r\n        data,\r\n        timestamp: Date.now()\r\n      });\r\n    }\r\n    \r\n    // Clear cache on write operations\r\n    if (options.method && ['POST', 'PUT', 'DELETE'].includes(options.method)) {\r\n      cache.clear();\r\n    }\r\n    \r\n    return data;\r\n  } catch (error) {\r\n    console.error('API Request Error:', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Function to manually clear cache\r\nexport function clearApiCache() {\r\n  cache.clear();\r\n}\r\n\r\n// Authentication API\r\nexport async function login(username, password) {\r\n  return apiRequest('/login', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ username, password }),\r\n  });\r\n}\r\n\r\nexport async function logout(username) {\r\n  return apiRequest('/logout', {\r\n    method: 'POST',\r\n    body: JSON.stringify({ username }),\r\n  });\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}