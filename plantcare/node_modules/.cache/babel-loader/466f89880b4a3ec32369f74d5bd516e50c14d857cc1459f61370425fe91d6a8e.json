{"ast":null,"code":"/**\r\n * Local storage-based caching system for API calls\r\n */\n\nconst CACHE_PREFIX = 'plantcare_cache_';\nconst DEFAULT_TTL = 60000; // 1 minute default TTL\n\n/**\r\n * Set a cached item with expiration\r\n * @param {string} key - Cache key\r\n * @param {any} data - Data to cache\r\n * @param {number} ttl - Time to live in milliseconds\r\n */\nexport const setCache = (key, data, ttl = DEFAULT_TTL) => {\n  try {\n    const cacheKey = `${CACHE_PREFIX}${key}`;\n    const item = {\n      data,\n      expires: Date.now() + ttl\n    };\n    localStorage.setItem(cacheKey, JSON.stringify(item));\n    return true;\n  } catch (error) {\n    console.error('Error setting cache:', error);\n    return false;\n  }\n};\n\n/**\r\n * Get a cached item if not expired\r\n * @param {string} key - Cache key\r\n * @returns {any|null} - Cached data or null if expired/not found\r\n */\nexport const getCache = key => {\n  try {\n    const cacheKey = `${CACHE_PREFIX}${key}`;\n    const item = localStorage.getItem(cacheKey);\n    if (!item) return null;\n    const parsed = JSON.parse(item);\n\n    // Check if cache is expired\n    if (parsed.expires < Date.now()) {\n      localStorage.removeItem(cacheKey);\n      return null;\n    }\n    return parsed.data;\n  } catch (error) {\n    console.error('Error getting cache:', error);\n    return null;\n  }\n};\n\n/**\r\n * Clear a specific cache item\r\n * @param {string} key - Cache key to clear\r\n */\nexport const clearCache = key => {\n  try {\n    const cacheKey = `${CACHE_PREFIX}${key}`;\n    localStorage.removeItem(cacheKey);\n  } catch (error) {\n    console.error('Error clearing cache:', error);\n  }\n};\n\n/**\r\n * Clear all cache items for the app\r\n */\nexport const clearAllCache = () => {\n  try {\n    const keysToRemove = [];\n    for (let i = 0; i < localStorage.length; i++) {\n      const key = localStorage.key(i);\n      if (key.startsWith(CACHE_PREFIX)) {\n        keysToRemove.push(key);\n      }\n    }\n    keysToRemove.forEach(key => localStorage.removeItem(key));\n    console.log(`Cleared ${keysToRemove.length} cached items`);\n  } catch (error) {\n    console.error('Error clearing all cache:', error);\n  }\n};\n\n/**\r\n * Generate a cache key for API calls with parameters\r\n * @param {string} endpoint - API endpoint\r\n * @param {object} params - Query parameters\r\n * @returns {string} - Cache key\r\n */\nexport const generateCacheKey = (endpoint, params = {}) => {\n  const sortedParams = Object.keys(params).sort().reduce((acc, key) => {\n    if (params[key] !== undefined && params[key] !== null && params[key] !== '') {\n      acc[key] = params[key];\n    }\n    return acc;\n  }, {});\n  return `${endpoint}_${JSON.stringify(sortedParams)}`;\n};","map":{"version":3,"names":["CACHE_PREFIX","DEFAULT_TTL","setCache","key","data","ttl","cacheKey","item","expires","Date","now","localStorage","setItem","JSON","stringify","error","console","getCache","getItem","parsed","parse","removeItem","clearCache","clearAllCache","keysToRemove","i","length","startsWith","push","forEach","log","generateCacheKey","endpoint","params","sortedParams","Object","keys","sort","reduce","acc","undefined"],"sources":["C:/Users/jerem/OneDrive/Desktop/uas-pemrograman_web_122450022/plantcare/src/services/cache.js"],"sourcesContent":["/**\r\n * Local storage-based caching system for API calls\r\n */\r\n\r\nconst CACHE_PREFIX = 'plantcare_cache_';\r\nconst DEFAULT_TTL = 60000; // 1 minute default TTL\r\n\r\n/**\r\n * Set a cached item with expiration\r\n * @param {string} key - Cache key\r\n * @param {any} data - Data to cache\r\n * @param {number} ttl - Time to live in milliseconds\r\n */\r\nexport const setCache = (key, data, ttl = DEFAULT_TTL) => {\r\n  try {\r\n    const cacheKey = `${CACHE_PREFIX}${key}`;\r\n    const item = {\r\n      data,\r\n      expires: Date.now() + ttl\r\n    };\r\n    localStorage.setItem(cacheKey, JSON.stringify(item));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error setting cache:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Get a cached item if not expired\r\n * @param {string} key - Cache key\r\n * @returns {any|null} - Cached data or null if expired/not found\r\n */\r\nexport const getCache = (key) => {\r\n  try {\r\n    const cacheKey = `${CACHE_PREFIX}${key}`;\r\n    const item = localStorage.getItem(cacheKey);\r\n    \r\n    if (!item) return null;\r\n    \r\n    const parsed = JSON.parse(item);\r\n    \r\n    // Check if cache is expired\r\n    if (parsed.expires < Date.now()) {\r\n      localStorage.removeItem(cacheKey);\r\n      return null;\r\n    }\r\n    \r\n    return parsed.data;\r\n  } catch (error) {\r\n    console.error('Error getting cache:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Clear a specific cache item\r\n * @param {string} key - Cache key to clear\r\n */\r\nexport const clearCache = (key) => {\r\n  try {\r\n    const cacheKey = `${CACHE_PREFIX}${key}`;\r\n    localStorage.removeItem(cacheKey);\r\n  } catch (error) {\r\n    console.error('Error clearing cache:', error);\r\n  }\r\n};\r\n\r\n/**\r\n * Clear all cache items for the app\r\n */\r\nexport const clearAllCache = () => {\r\n  try {\r\n    const keysToRemove = [];\r\n    \r\n    for (let i = 0; i < localStorage.length; i++) {\r\n      const key = localStorage.key(i);\r\n      if (key.startsWith(CACHE_PREFIX)) {\r\n        keysToRemove.push(key);\r\n      }\r\n    }\r\n    \r\n    keysToRemove.forEach(key => localStorage.removeItem(key));\r\n    console.log(`Cleared ${keysToRemove.length} cached items`);\r\n  } catch (error) {\r\n    console.error('Error clearing all cache:', error);\r\n  }\r\n};\r\n\r\n/**\r\n * Generate a cache key for API calls with parameters\r\n * @param {string} endpoint - API endpoint\r\n * @param {object} params - Query parameters\r\n * @returns {string} - Cache key\r\n */\r\nexport const generateCacheKey = (endpoint, params = {}) => {\r\n  const sortedParams = Object.keys(params)\r\n    .sort()\r\n    .reduce((acc, key) => {\r\n      if (params[key] !== undefined && params[key] !== null && params[key] !== '') {\r\n        acc[key] = params[key];\r\n      }\r\n      return acc;\r\n    }, {});\r\n  \r\n  return `${endpoint}_${JSON.stringify(sortedParams)}`;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}