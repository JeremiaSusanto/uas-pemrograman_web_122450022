{"ast":null,"code":"// BASE URL API\nconst API_URL = 'http://localhost:6543/api';\n\n// TANAMAN API\nexport const tanamanApi = {\n  // Ambil semua tanaman\n  getAll: async () => {\n    try {\n      const response = await fetch(`${API_URL}/tanaman`);\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      const data = await response.json();\n      return data.tanaman;\n    } catch (error) {\n      console.error(\"Error fetching tanaman:\", error);\n      throw error;\n    }\n  },\n  // Tambah tanaman baru\n  create: async tanamanData => {\n    try {\n      const response = await fetch(`${API_URL}/tanaman`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(tanamanData)\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error creating tanaman:\", error);\n      throw error;\n    }\n  },\n  // Update tanaman\n  update: async (id, tanamanData) => {\n    try {\n      const response = await fetch(`${API_URL}/tanaman/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(tanamanData)\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error updating tanaman ${id}:`, error);\n      throw error;\n    }\n  },\n  // Hapus tanaman\n  delete: async id => {\n    try {\n      const response = await fetch(`${API_URL}/tanaman/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error deleting tanaman ${id}:`, error);\n      throw error;\n    }\n  }\n};\n\n// JADWAL API\nexport const jadwalApi = {\n  // Ambil semua jadwal\n  getAll: async () => {\n    try {\n      const response = await fetch(`${API_URL}/jadwal`);\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      const data = await response.json();\n      return data.jadwal.map(j => ({\n        id: j.id,\n        namaTanaman: j.nama_tanaman,\n        kegiatan: j.kegiatan,\n        tanggal: j.tanggal\n      }));\n    } catch (error) {\n      console.error(\"Error fetching jadwal:\", error);\n      throw error;\n    }\n  },\n  // Tambah jadwal baru\n  create: async jadwalData => {\n    try {\n      console.log(\"Sending jadwal data:\", jadwalData); // Log data being sent\n\n      // Ensure proper formatting of the data\n      const formattedData = {\n        namaTanaman: jadwalData.namaTanaman,\n        kegiatan: jadwalData.kegiatan,\n        tanggal: jadwalData.tanggal\n      };\n      console.log(\"Formatted data:\", formattedData);\n      const response = await fetch(`${API_URL}/jadwal`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(formattedData)\n      });\n\n      // Handle non-OK responses\n      if (!response.ok) {\n        let errorMessage;\n        try {\n          // Try to get a JSON error message\n          const errorData = await response.json();\n          errorMessage = errorData.error || `Error: ${response.status}`;\n        } catch {\n          // If response isn't JSON, just use text\n          const errorText = await response.text();\n          errorMessage = `Error: ${response.status} - ${errorText || 'Unknown error'}`;\n        }\n        throw new Error(errorMessage);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(\"Error creating jadwal:\", error);\n      throw error;\n    }\n  },\n  // Update jadwal\n  update: async (id, jadwalData) => {\n    try {\n      const response = await fetch(`${API_URL}/jadwal/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(jadwalData)\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error updating jadwal ${id}:`, error);\n      throw error;\n    }\n  },\n  // Hapus jadwal\n  delete: async id => {\n    try {\n      const response = await fetch(`${API_URL}/jadwal/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error(`Error deleting jadwal ${id}:`, error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["API_URL","tanamanApi","getAll","response","fetch","ok","Error","status","data","json","tanaman","error","console","create","tanamanData","method","headers","body","JSON","stringify","update","id","delete","jadwalApi","jadwal","map","j","namaTanaman","nama_tanaman","kegiatan","tanggal","jadwalData","log","formattedData","errorMessage","errorData","errorText","text"],"sources":["C:/Users/jerem/OneDrive/Desktop/uas-pemrograman_web_122450022/plantcare/src/services/api.js"],"sourcesContent":["// BASE URL API\r\nconst API_URL = 'http://localhost:6543/api';\r\n\r\n// TANAMAN API\r\nexport const tanamanApi = {\r\n    // Ambil semua tanaman\r\n    getAll: async () => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/tanaman`);\r\n            if (!response.ok) {\r\n                throw new Error(`Error: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            return data.tanaman;\r\n        } catch (error) {\r\n            console.error(\"Error fetching tanaman:\", error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Tambah tanaman baru\r\n    create: async (tanamanData) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/tanaman`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(tanamanData)\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(`Error: ${response.status}`);\r\n            }\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error(\"Error creating tanaman:\", error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Update tanaman\r\n    update: async (id, tanamanData) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/tanaman/${id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(tanamanData)\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(`Error: ${response.status}`);\r\n            }\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error(`Error updating tanaman ${id}:`, error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Hapus tanaman\r\n    delete: async (id) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/tanaman/${id}`, {\r\n                method: 'DELETE'\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(`Error: ${response.status}`);\r\n            }\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error(`Error deleting tanaman ${id}:`, error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n\r\n// JADWAL API\r\nexport const jadwalApi = {\r\n    // Ambil semua jadwal\r\n    getAll: async () => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/jadwal`);\r\n            if (!response.ok) {\r\n                throw new Error(`Error: ${response.status}`);\r\n            }\r\n            const data = await response.json();\r\n            return data.jadwal.map(j => ({\r\n                id: j.id,\r\n                namaTanaman: j.nama_tanaman,\r\n                kegiatan: j.kegiatan,\r\n                tanggal: j.tanggal\r\n            }));\r\n        } catch (error) {\r\n            console.error(\"Error fetching jadwal:\", error);\r\n            throw error;\r\n        }\r\n    },    // Tambah jadwal baru\r\n    create: async (jadwalData) => {\r\n        try {\r\n            console.log(\"Sending jadwal data:\", jadwalData);  // Log data being sent\r\n            \r\n            // Ensure proper formatting of the data\r\n            const formattedData = {\r\n                namaTanaman: jadwalData.namaTanaman,\r\n                kegiatan: jadwalData.kegiatan,\r\n                tanggal: jadwalData.tanggal\r\n            };\r\n            \r\n            console.log(\"Formatted data:\", formattedData);\r\n            \r\n            const response = await fetch(`${API_URL}/jadwal`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json'\r\n                },\r\n                body: JSON.stringify(formattedData)\r\n            });\r\n            \r\n            // Handle non-OK responses\r\n            if (!response.ok) {\r\n                let errorMessage;\r\n                try {\r\n                    // Try to get a JSON error message\r\n                    const errorData = await response.json();\r\n                    errorMessage = errorData.error || `Error: ${response.status}`;\r\n                } catch {\r\n                    // If response isn't JSON, just use text\r\n                    const errorText = await response.text();\r\n                    errorMessage = `Error: ${response.status} - ${errorText || 'Unknown error'}`;\r\n                }\r\n                throw new Error(errorMessage);\r\n            }\r\n            \r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error(\"Error creating jadwal:\", error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Update jadwal\r\n    update: async (id, jadwalData) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/jadwal/${id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(jadwalData)\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(`Error: ${response.status}`);\r\n            }\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error(`Error updating jadwal ${id}:`, error);\r\n            throw error;\r\n        }\r\n    },\r\n\r\n    // Hapus jadwal\r\n    delete: async (id) => {\r\n        try {\r\n            const response = await fetch(`${API_URL}/jadwal/${id}`, {\r\n                method: 'DELETE'\r\n            });\r\n            if (!response.ok) {\r\n                throw new Error(`Error: ${response.status}`);\r\n            }\r\n            return await response.json();\r\n        } catch (error) {\r\n            console.error(`Error deleting jadwal ${id}:`, error);\r\n            throw error;\r\n        }\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}